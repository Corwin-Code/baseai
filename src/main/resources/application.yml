# ==================================================================================
# BaseAI 应用配置文件 - 基于Spring Boot的AI平台核心配置文件
# ==================================================================================

# =================== 应用基础配置 ===================
spring:
  application:
    # 应用名
    name: baseai
  main:
    # 懒加载
    lazy-initialization: false
    allow-bean-definition-overriding: false

  # =================== 数据库配置 ===================
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:172.18.20.209}:${DB_PORT:5432}/${DB_DATABASE:baseai}
    username: ${DB_USERNAME:username}
    password: ${DB_PASSWORD:password}

    # HikariCP 连接池配置
    hikari:
      pool-name: BaseAI-HikariCP
      # 最小空闲连接数，保证基本的并发处理能力
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      # 最大连接数，避免数据库连接过多
      maximum-pool-size: ${DB_POOL_MAX_SIZE:20}
      # 空闲连接的最大生存时间（毫秒），防止连接长时间占用
      idle-timeout: ${DB_POOL_IDLE_TIMEOUT:300000}
      # 连接的最大生存时间（毫秒），防止连接老化
      max-lifetime: ${DB_POOL_MAX_LIFETIME:1800000}
      # 获取连接的超时时间（毫秒），避免长时间等待
      connection-timeout: ${DB_POOL_CONNECTION_TIMEOUT:30000}
      # 连接泄漏检测阈值，帮助发现代码中的连接泄漏问题
      leak-detection-threshold: 60000

  # =================== JPA/Hibernate 配置 ===================
  jpa:
    # 关闭 Open-In-View，避免懒加载问题
    open-in-view: false
    # 是否在控制台打印 SQL
    show-sql: ${JPA_SHOW_SQL:true}
    hibernate:
      # 生产环境使用 validate，开发环境可以使用 update(自动更新表结构)
      ddl-auto: ${JPA_DDL_AUTO:update}
      # 使用下划线命名策略，符合数据库命名规范
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: false
        # 批量操作优化
        jdbc:
          batch_size: 25
          order_inserts: true
          order_updates: true
          # 二级缓存配置
        cache:
          use_second_level_cache: false

  # =================== Redis 缓存配置 ===================
  data:
    redis:
      # Redis 主机
      host: ${REDIS_HOST:172.18.20.209}
      # 端口
      port: ${REDIS_PORT:6379}
      # 密码（生产走密管）
      password: ${REDIS_PASSWORD:}
      # 库序号（0~15）
      database: ${REDIS_DATABASE:0}
      # 命令超时（建议用 Duration，示例 8 秒）
      timeout: ${REDIS_TIMEOUT:8s}
      # 连接超时（示例 5 秒）
      connect-timeout: ${REDIS_CONNECT_TIMEOUT:5s}

      # Lettuce 连接池配置（推荐使用 Lettuce 而不是 Jedis）
      lettuce:
        pool:
          # 最大连接数（并发适中起步）
          max-active: ${REDIS_POOL_MAX_ACTIVE:64}
          # 最大空闲连接
          max-idle: ${REDIS_POOL_MAX_IDLE:32}
          # 最小空闲连接
          min-idle: ${REDIS_POOL_MIN_IDLE:8}
          # 取连接最大等待时间
          max-wait: ${REDIS_POOL_MAX_WAIT:5s}

  # Spring Cache 配置
  cache:
    type: redis
    redis:
      # 默认缓存过期时间（30分钟）
      time-to-live: ${CACHE_DEFAULT_TTL:30m}
      cache-null-values: false
      use-key-prefix: true

  # ========== 消息队列配置 (可选) ==========
  # rabbitmq:
  #   host: ${MQ_HOST:localhost}
  #   port: ${MQ_PORT:5672}
  #   username: ${MQ_USERNAME:guest}
  #   password: ${MQ_PASSWORD:guest}
  #   virtual-host: ${MQ_VHOST:/}
  #   connection-timeout: 5000ms

  # =================== 国际化配置 ===================
  messages:
    basename: messages/errors
    encoding: UTF-8
    # 生产：缓存 1 小时；开发可覆盖为 0s 以便热更新
    cache-duration: PT1H
    # 不回退到系统 Locale，避免环境差异带来的文案异常
    fallback-to-system-locale: false
    # 始终按 MessageFormat 解析，占位符需要用 {0}、{1}；注意单引号需写成 ''
    always-use-message-format: true

  # =================== 邮件服务基础配置 ===================
  mail:
    # SMTP 主机（企业邮箱）
    host: ${MAIL_HOST:smtp.exmail.qq.com}
    # 587 = 明文连接 + STARTTLS 升级
    port: ${MAIL_PORT:587}
    # 发信账号（建议专用账号）
    username: ${MAIL_USERNAME:}
    # 发信密码/授权码（不要硬编码）
    password: ${MAIL_PASSWORD:}
    # 协议：smtp（STARTTLS 场景）
    protocol: smtp
    # 默认编码
    default-encoding: UTF-8
    # 启动时是否尝试连接（prod 一般 false；运维需要可设 true）
    test-connection: false
    properties:
      mail:
        smtp:
          # 启用 SMTP 身份认证
          auth: true
          # ===== STARTTLS（587 端口）=====
          starttls:
            # 允许 STARTTLS
            enable: true
            # 要求必须使用 TLS，否则失败（更安全）
            required: true
          # ===== TLS/SSL 细化配置 =====
          ssl:
            # 限定协议版本，避免降级
            protocols: "TLSv1.2 TLSv1.3"
            # 校验证书主机名，防止中间人
            checkserveridentity: true
            # 如遇信任链异常可临时指定（更推荐安装正确 CA）
            # trust: "smtp.exmail.qq.com"
          # ===== 连接/读写超时（毫秒）=====
          # 连接超时（建议 10s）
          connectiontimeout: ${MAIL_CONNECTION_TIMEOUT:10000}
          # 读取超时（建议 15s）
          timeout: ${MAIL_TIMEOUT:15000}
          # 写入超时（建议 15s）
          writetimeout: ${MAIL_WRITE_TIMEOUT:15000}
          # ===== 连接池/性能（大批量发送可启用）=====
          # 批量发送可改 true，复用连接减少握手
          pool: false
          # 连接池大小（根据并发量与服务端限流设置）
          # pool.size: 5
          # 允许 8bit 传输（多数现代服务器兼容）
          allow8bitmime: true

  # =================== AI服务默认配置 ===================
  ai:
    model:
      # 禁用官方Chat自动装配
      chat: none
      # 禁用默认文本向量化模型
      embedding: none
      # 禁用默认文生图模型
      image: none
      # 禁用默认语音模型
      audio:
        speech: none
  autoconfigure:
    exclude:
      # —— Alibaba DashScope
      - com.alibaba.cloud.ai.autoconfigure.dashscope.DashScopeAgentAutoConfiguration
      - com.alibaba.cloud.ai.autoconfigure.dashscope.DashScopeAutoConfiguration
        
      # —— OpenAI（官方 Spring AI）模块
      - org.springframework.ai.model.openai.autoconfigure.OpenAiAudioTranscriptionAutoConfiguration  # ASR
      - org.springframework.ai.model.openai.autoconfigure.OpenAiModerationAutoConfiguration          # 审核
      - org.springframework.ai.model.openai.autoconfigure.OpenAiImageAutoConfiguration               # 图像
      - org.springframework.ai.model.openai.autoconfigure.OpenAiAudioSpeechAutoConfiguration         # TTS

# =================== 服务器配置 ===================
server:
  # 服务端口（可用环境变量覆盖）
  port: ${SERVER_PORT:8080}
  servlet:
    # 应用上下文路径，默认根(/)
    context-path: ${SERVER_CONTEXT_PATH:}
    encoding:
      # 统一请求/响应编码
      charset: UTF-8
      # 无论请求头如何都强制使用 UTF-8
      force: true

  # 启用响应压缩（GZIP），仅对文本类 MIME 生效
  compression:
    enabled: true
    mime-types: >-
      text/html,text/css,text/plain,
      application/javascript,application/json,
      application/xml,text/xml,
      application/x-yaml,
      application/problem+json,
      application/ndjson
    # 小于 1KB 的响应不压缩，避免 CPU 开销
    min-response-size: 1024

  # 错误页面与错误信息展示策略
  error:
    whitelabel:
      # 禁用默认白标错误页（使用自定义错误页或统一异常处理）
      enabled: false
    # 生产安全：不返回堆栈
    include-stacktrace: never
    # ⛔ 建议生产改为 never 或 on_param（见下方按环境覆盖）
    include-message: always

  # HTTP/2（在 HTTPS/TLS 场景显著提升性能）
  http2:
    enabled: true

  # 反向代理/负载均衡场景需要正确处理 X-Forwarded-* 头
  forward-headers-strategy: native
  # spring boot 3.4+ 支持：framework/native；native 走容器实现，例如 tomcat RemoteIpValve

  # Tomcat 资源与报文限制（按压测结果调整）
  tomcat:
    threads:
      # 最大工作线程（并发量大可适当上调）
      max: 200
      min-spare: 20
    # 等待队列长度
    accept-count: 100
    # 表单上传大小限制（防御性）
    max-http-form-post-size: 2MB
    # HTTP 头大小限制（防御性）
    max-http-response-header-size: 16KB
    # 连接被关闭前吞入的最大请求体（防御性）
    max-swallow-size: 2MB

# =================== 管理端点配置 ===================
management:
  server:
    # 管理端口（建议仅内网或加鉴权）
    port: ${MGMT_PORT:8081}
  endpoints:
    web:
      # 统一前缀
      base-path: /actuator
      exposure:
        # 暴露健康检查、指标等监控端点
        include: health,info,metrics,scheduledtasks,prometheus,loggers,env,configprops
  endpoint:
    health:
      # 健康细节仅授权可见
      show-details: when-authorized
      # 总览显示组件（与上行配合更安全）
      show-components: always
      # 启用 liveness/readiness（K8s 友好）
      probes:
        enabled: true
    metrics:
      # 仅在受控网络/鉴权下使用；否则建议受限
      access: unrestricted
    prometheus:
      # 同上
      access: unrestricted
  prometheus:
    metrics:
      export:
        # 暴露 /actuator/prometheus
        enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        # 为 HTTP 请求开启直方图（P95/P99）
        "[http.server.requests]": true
        # 自定义计时器直方图
        "[baseai.chat.response.time]": true
        "[baseai.kb.search.time]": true
      # 为关键接口定义 SLO 分桶（PromQL 友好）
      slo:
        "[http.server.requests]": 50ms,100ms,200ms,300ms,500ms,1s,2s,5s
    tags:
      # 统一标签
      application: ${spring.application.name}
      # 环境标签（dev/qa/prod）
      environment: ${spring.profiles.active}
      # 可选：实例标识（K8s 建议用 HOSTNAME）
      # instanceId: ${HOSTNAME:${random.uuid}}
  health:
    db:
      enabled: true
    redis:
      enabled: true
    diskspace:
      enabled: true

# =================== 日志配置 ===================
logging:
  level:
    # 全局日志级别（默认 INFO）
    root: ${LOG_LEVEL_ROOT:INFO}
    # 应用主包日志级别（默认 DEBUG）
    com.cloud.baseai: ${LOG_LEVEL_APP:DEBUG}
    # Spring Web 请求日志
    org.springframework.web: ${LOG_LEVEL_SPRING_WEB:INFO}
    # Spring Security 日志
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    # Hibernate SQL 输出日志（仅 WARN）
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
    # Hibernate 参数绑定日志（仅 WARN）
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    # Hibernate 连接池日志
    org.hibernate.orm.connections.pooling: WARN
    # Spring Cache 相关日志
    org.springframework.cache: DEBUG
    # 阿里云 AI 相关日志
    com.alibaba.cloud.ai: INFO
    # Spring AI 相关日志
    org.springframework.ai: INFO
    # Spring 调度（定时任务）日志
    org.springframework.scheduling: INFO
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 文件日志格式：时间戳 + 线程 + 级别（左对齐5位）+ 最多50字符类名 + 消息
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    # 日志文件路径（默认 logs/baseai-cloud.log）
    name: ${LOG_FILE:logs/baseai-cloud.log}
  logback:
    rollingpolicy:
      # 单文件最大 100MB，超过后切分
      max-file-size: ${LOG_FILE_MAX_SIZE:100MB}
      # 保留最近 30 天的日志归档
      max-history: ${LOG_FILE_MAX_HISTORY:30}
      # 所有归档总大小上限 1GB，超过则删除最旧
      total-size-cap: ${LOG_FILE_TOTAL_SIZE:1GB}

# =================== API 文档配置 ===================
springdoc:
  api-docs:
    enabled: ${SPRINGDOC_ENABLED:true}
    path: /v3/api-docs
  swagger-ui:
    enabled: ${SPRINGDOC_ENABLED:true}
    path: /swagger-ui.html
    disable-swagger-default-url: true
    # 设置默认显示最重要的API分组
    urls-primary-name: 'kb-api'
    # 设置操作和标签的排序
    operations-sorter: alpha
    tags-sorter: none
    # 设置默认的模型渲染深度
    default-model-expand-depth: 2
    # 设置默认的模型示例展开深度
    default-models-expand-depth: 1
    # 显示请求持续时间
    display-request-duration: true
  show-actuator: false
  group-configs:
    # 核心业务API - 最常用的功能
    - group: 'kb-api'
      display-name: '📚 知识库API'
      paths-to-match: '/api/v1/kb/**'
    - group: 'chat-api'
      display-name: '💬 对话API'
      paths-to-match: '/api/v1/chat/**'

    # 用户相关API
    - group: 'auth-api'
      display-name: '🔐 认证授权API'
      paths-to-match: '/api/v1/auth/**'
    - group: 'user-api'
      display-name: '👥 用户管理API'
      paths-to-match: '/api/v1/users/**'

    # 扩展功能API
    - group: 'flow-api'
      display-name: '🔄 流程编排API'
      paths-to-match: '/api/v1/flows/**'
    - group: 'misc-api'
      display-name: '🔧 其他API'
      paths-to-match:
        - '/api/v1/misc/**'
        - '/api/v1/mcp/**'

    # 管理功能API - 使用频率较低
    - group: 'system-api'
      display-name: '⚙️ 系统管理API'
      paths-to-match:
        - '/api/v1/system/**'
        - '/api/v1/audit/**'

  # =================== 应用特定配置 ===================
  # 注意：以下配置为应用框架级别配置，不可动态修改
baseai:
  # ========== 系统安全配置 ==========
  security:
    # JWT 令牌配置
    jwt:
      # 是否使用RSA加密（推荐生产环境使用）
      use-rsa: true
      # RSA密钥对（Base64编码）
      # 生产环境中这些密钥应该从外部密钥管理服务或环境变量中加载
      rsa-private-key: ${JWT_RSA_PRIVATE_KEY:MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCZlvFsbXNbePtnjMBQXcX1z52QacU1nB0A4RCftC7nKM6ZVhaM3A5zEIXkGJoVfr2QgBArRJWTGAy/a3BF8C0Ndk/v3AuKkkhQRBPa3kShOc+MvrHZ/TM3qmpUpsYijlnwVSAai4rJFfRqQvyU+4y3i/nzJ7218rZolF5j0C2t4MB7KmvZMlyKB0TuJtHncuvDSViYHdw7EEKrzjxhAy/XfEKtShOicg1Gy5tSgUnNJW+EKKpUEFfx3R4ICiYTjYcgoll6H1deW0fCGeAFerRM+1ECmaIC66608rPhPQnRYvMjN8+JAUAlQNd8ichcdeVerluWg3EgrHHRa+C1fl+vAgMBAAECggEAAKoxGM2NihHpI385Q+GsB5oIXwHNQdEAYV9yYIh5kjRnGi3Pt1puQitN/jzo5/M0/hY30kmJNjWULQSG1I+cMsihhno8gQX11rNXFwOldcGMkcM+m2xFxL8uEB3qr+7XCx3FkKfZj468NkA+Y7Q6sCRZaJfyPPNo+OU1KSbL21nIefcBZvsCGdcoCuA6XB2nl7svw6VXV/+ZYNfZfHtsSvMDskod1BcWTsMvsO/h9N6ayIBwnNcoYRH4/Fg33l/vc06o9GiBMTTkvEkeCpCipW8IHIz5rl1aDjJxqrihDUGegZ5md4i5A7L4HOVjDHIedJEwoTamzwIRgKP/ZCGj9QKBgQDYC8sOvdxO2Pr+TWMqK+Ax0hCpR/YMgMJnzSaeehFbGOgL1uDVyrfHSMiFS1+o0Q88DdwhdFWOfcHMZibBaCDyu+XZvUqgVl+vuDmRE0bADuoiSi2U0UgjM48cosZ7jPWUMlepDMD8YjFnk+JyZUX+GhAcv6WFiQhw96UNCgt34wKBgQC1/krVb3nrDs1DmXyMUqN424X0E3bj4qWVCTw4tzlToB+JItzAzSkL+VHMlI++FhiVrbrtROdP+e8MjHGgYqm0efoGv+S1fKNkpoCKeZ8S47dL0OUxirzwNzr/brcZWI0eBCZiKJP2Mkl+10uTe3SGU7jm6ZBsasM1HA10IkbKxQKBgHHAM9e9K2PwZqbChDXOCCrzGYantur6WGFi6LSEPOMkB/lD1/l41K5+qeVUvDcca9MI0SBkKi/uEr3WAw3OD5r+R5UPT12AXL0eWGEELzosICaRu9IhJsQx/2XqZmri2uJ+Zx1A89Nut+h7Or1UiTey7UzVswbOEb25BhQJd+RVAoGAG0txI8OdUGCe7mWFpXH7bHPYCjwlF5Z1aP3Cl2r7YQxhzmp5Gz1py47v8rPRPxwHQeOVZmJwIrGEZahmnjxN4XBtzDdZcNKpmr3SB3KoJegbJHbG+QAqyAgwhACx205Jk9fhfdVCI6l1Fl3pysu4NTE3SQJ8k5YLgtqbNfCyF1UCgYEAkXQ5j+pSJxprgaFrvXHpFOFJ+d/6gaevTQn/n05kjBEUVxZw04RVYKN1kjo3gQGmQVrWhDXrjwNMXmD5QfUNVzPbRtdbkY+rP7ojezN0VIza9fu+GRhWGWDyUzzYcd/u3KWET4z6FC88CyYodadVF3td5R08IdeVqPIhuwwmQVs=}
      rsa-public-key: ${JWT_RSA_PUBLIC_KEY:MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmZbxbG1zW3j7Z4zAUF3F9c+dkGnFNZwdAOEQn7Qu5yjOmVYWjNwOcxCF5BiaFX69kIAQK0SVkxgMv2twRfAtDXZP79wLipJIUEQT2t5EoTnPjL6x2f0zN6pqVKbGIo5Z8FUgGouKyRX0akL8lPuMt4v58ye9tfK2aJReY9AtreDAeypr2TJcigdE7ibR53Lrw0lYmB3cOxBCq848YQMv13xCrUoTonINRsubUoFJzSVvhCiqVBBX8d0eCAomE42HIKJZeh9XXltHwhngBXq0TPtRApmiAuuutPKz4T0J0WLzIzfPiQFAJUDXfInIXHXlXq5bloNxIKxx0WvgtX5frwIDAQAB}
      # HMAC密钥（当use-rsa=false时使用）
      secret: ${JWT_SECRET:very-long-secret-key-at-least-256-bits-for-production-environment-security}

      # 令牌过期时间配置
      # 访问令牌有效期（1小时）
      access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION:3600000}
      # 刷新令牌有效期（7天）
      refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000}
      # JWT 发行者标识
      issuer: ${JWT_ISSUER:baseai-cloud-system}

      # 安全特性开关
      # 是否启用令牌黑名单
      enable-blacklist: true
      # 是否启用设备指纹验证
      enable-device-fingerprint: true
      # 自动刷新阈值（秒）
      auto-refresh-threshold: 1800

    # 跨域资源共享配置
    cors:
      enabled: true
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080,https://*.baseai.com}
      allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
      allowed-headers: ${CORS_ALLOWED_HEADERS:Authorization,Content-Type,X-Requested-With,X-Device-Fingerprint}
      exposed-headers: ${CORS_EXPOSED_HEADERS:Authorization,X-Total-Count,X-Page-Number,X-Page-Size}
      allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
      max-age: ${CORS_MAX_AGE:3600}

    # 密码策略配置
    password:
      # 最小长度要求
      min-length: ${PASSWORD_MIN_LENGTH:8}
      # 最大长度限制
      max-length: ${PASSWORD_MAX_LENGTH:128}
      # 是否要求包含大写字母
      require-uppercase: ${PASSWORD_REQUIRE_UPPERCASE:true}
      # 是否要求包含小写字母
      require-lowercase: ${PASSWORD_REQUIRE_LOWERCASE:true}
      # 是否要求包含数字
      require-numbers: ${PASSWORD_REQUIRE_NUMBERS:true}
      # 是否要求包含特殊字符
      require-special-chars: ${PASSWORD_REQUIRE_SPECIAL:true}
      # 允许的特殊字符集合
      special-chars: "!@#$%^&*()_+-=[]{}|;:,.<>?"
      # 密码历史记录数量，防止重复使用近期密码
      history-count: ${PASSWORD_HISTORY_COUNT:5}
      # 密码最大使用天数，超过后强制修改
      max-age-days: ${PASSWORD_MAX_AGE:90}
      # 登录失败锁定阈值
      lockout-threshold: ${PASSWORD_LOCKOUT_THRESHOLD:5}
      # 账户锁定时间（分钟）
      lockout-duration-minutes: ${PASSWORD_LOCKOUT_DURATION:30}
      # 启用密码复杂度检查
      enable-complexity-check: true
      # 启用弱密码检测
      enable-weak-password-check: true
      # 启用密码泄露检查
      enable-breach-check: true

    # 认证相关配置
    auth:
      # 是否允许多设备登录
      enable-multi-device: true
      # 单用户最大同时登录设备数
      max-devices-per-user: 5
      # 是否启用IP地址验证
      enable-ip-validation: false
      # 允许的IP地址列表
      allowed-ips: ""
      # 会话超时时间
      session-timeout-minutes: 120
      # 是否启用记住我功能
      enable-remember-me: true
      # 记住我有效期
      remember-me-days: 30
      # 是否启用验证码
      enable-captcha: false
      # 验证码触发阈值
      captcha-threshold: 3
      # 是否启用二次验证
      enable-two-factor-auth: false
      # 二次验证代码有效期
      two-factor-code-expiration: 300
      # 是否启用登录异常检测
      enable-anomaly-detection: true
      # 是否记录登录历史
      enable-login-history: true
      # 登录历史保留天数
      login-history-retention-days: 90

  # ========== 速率限制配置 ==========
  rate-limit:
    # 全局API限制
    global:
      # 每分钟最大请求数
      requests-per-minute: ${RATE_LIMIT_GLOBAL_PER_MINUTE:100}
      # 每小时最大请求数
      requests-per-hour: ${RATE_LIMIT_GLOBAL_PER_HOUR:1000}
      # 每天最大请求数
      requests-per-day: ${RATE_LIMIT_GLOBAL_PER_DAY:10000}
      # 最大并发请求数
      concurrent-requests: ${RATE_LIMIT_CONCURRENT:20}
      # 是否启用突发保护
      enable-burst-protection: ${RATE_LIMIT_BURST_ENABLE:true}
      # 突发倍数，允许短时间内超过正常限制
      burst-multiplier: ${RATE_LIMIT_BURST_MULTIPLIER:2.0}

    # 用户级别限制
    user:
      # 免费用户限制
      free-tier:
        requests-per-day: ${RATE_LIMIT_FREE_DAILY:100}
        chat-messages-per-hour: ${RATE_LIMIT_FREE_CHAT_HOURLY:20}
        document-uploads-per-day: ${RATE_LIMIT_FREE_UPLOAD_DAILY:10}
      # 高级用户限制
      premium-tier:
        requests-per-day: ${RATE_LIMIT_PREMIUM_DAILY:5000}
        chat-messages-per-hour: ${RATE_LIMIT_PREMIUM_CHAT_HOURLY:200}
        document-uploads-per-day: ${RATE_LIMIT_PREMIUM_UPLOAD_DAILY:100}
      # 企业用户限制
      enterprise-tier:
        requests-per-day: ${RATE_LIMIT_ENTERPRISE_DAILY:50000}
        chat-messages-per-hour: ${RATE_LIMIT_ENTERPRISE_CHAT_HOURLY:2000}
        document-uploads-per-day: ${RATE_LIMIT_ENTERPRISE_UPLOAD_DAILY:1000}

  # ========== 知识库模块配置 ==========
  knowledge-base:
    # 文档处理配置
    document:
      # 单个文档最大大小（字节），默认10MB
      max-size-bytes: ${KB_DOC_MAX_SIZE:10485760}
      # 批量处理最大数量
      max-batch-size: ${KB_DOC_MAX_BATCH:100}
      # 批量处理超时时间（秒）
      batch-timeout-seconds: ${KB_DOC_BATCH_TIMEOUT:300}
      # 处理失败重试次数
      retry-attempts: ${KB_DOC_RETRY_ATTEMPTS:3}
      # 支持的文件格式
      supported-formats:
        - pdf
        - txt
        - md
        - docx
        - doc
        - rtf
      # 支持的MIME类型
      supported-mime-types:
        - text/plain
        - text/markdown
        - application/pdf
        - application/msword
        - application/vnd.openxmlformats-officedocument.wordprocessingml.document

    # 文档分块配置
    chunking:
      # 默认分块大小（字符数）
      default-chunk-size: ${KB_CHUNK_SIZE:1000}
      # 分块重叠大小（字符数），保证语义连续性
      chunk-overlap: ${KB_CHUNK_OVERLAP:200}
      # 最小分块大小，避免过小的分块
      min-chunk-size: ${KB_CHUNK_MIN_SIZE:100}
      # 最大分块大小，避免过大的分块影响检索精度
      max-chunk-size: ${KB_CHUNK_MAX_SIZE:4000}
      # 是否启用自适应分块，根据内容类型调整策略
      adaptive-chunking: ${KB_ADAPTIVE_CHUNKING:true}
      # 按内容类型的分块策略
      content-type-strategies:
        markdown:
          chunk-size: 800
          overlap: 150
        pdf:
          chunk-size: 1200
          overlap: 250
        text:
          chunk-size: 1000
          overlap: 200

    # 向量嵌入配置
    embedding:
      # 默认嵌入模型
      default-model: ${KB_EMBEDDING_MODEL:text-embedding-3-small}
      # 向量维度
      dimension: ${KB_EMBEDDING_DIMENSION:1536}
      # 批量处理大小
      batch-size: ${KB_EMBEDDING_BATCH_SIZE:50}
      # API调用超时时间（秒）
      timeout-seconds: ${KB_EMBEDDING_TIMEOUT:30}
      # 是否标准化向量
      normalize: ${KB_EMBEDDING_NORMALIZE:true}
      # 备用模型列表，当主模型不可用时使用
      fallback-models:
        - text-embedding-ada-002
        - text-embedding-v2
      # 模型能力配置，用于智能选择模型
      model-capabilities:
        text-embedding-3-small:
          max-tokens: 8191
          dimension: 1536
          cost-per-token: 0.00002
        text-embedding-3-large:
          max-tokens: 8191
          dimension: 3072
          cost-per-token: 0.00013
        text-embedding-ada-002:
          max-tokens: 8191
          dimension: 1536
          cost-per-token: 0.0001
        text-embedding-v2:
          max-tokens: 2048
          dimension: 1536
          cost-per-token: 0.0007

    # 向量搜索配置
    search:
      # 默认返回结果数量
      default-top-k: ${KB_SEARCH_TOP_K:10}
      # 最大返回结果数量
      max-top-k: ${KB_SEARCH_MAX_TOP_K:100}
      # 默认相似度阈值
      default-threshold: ${KB_SEARCH_THRESHOLD:0.7}
      # 最小相似度阈值
      min-threshold: ${KB_SEARCH_MIN_THRESHOLD:0.0}
      # 是否启用重排序，提高搜索质量
      enable-rerank: ${KB_SEARCH_ENABLE_RERANK:true}
      # 重排序候选数量
      rerank-top-k: ${KB_SEARCH_RERANK_TOP_K:20}
      # 搜索结果缓存时间（秒）
      result-cache-ttl-seconds: ${KB_SEARCH_CACHE_TTL:300}
      # 高亮显示配置
      highlight:
        enable: ${KB_SEARCH_HIGHLIGHT_ENABLE:true}
        max-highlights: ${KB_SEARCH_HIGHLIGHT_MAX:3}
        highlight-length: ${KB_SEARCH_HIGHLIGHT_LENGTH:100}
        fragment-size: ${KB_SEARCH_FRAGMENT_SIZE:150}

    # 性能优化配置
    performance:
      # 数据库连接池大小
      db-pool-size: ${KB_PERF_DB_POOL:20}
      # 异步处理线程池大小
      async-pool-size: ${KB_PERF_ASYNC_POOL:10}
      # 批量处理大小
      batch-process-size: ${KB_PERF_BATCH_SIZE:100}
      # 是否启用查询缓存
      enable-query-cache: ${KB_PERF_QUERY_CACHE:true}
      # 查询缓存大小
      query-cache-size: ${KB_PERF_CACHE_SIZE:1000}
      # 是否启用性能指标收集
      enable-metrics: ${KB_PERF_METRICS:true}
      # 慢查询阈值（毫秒）
      slow-query-threshold-ms: ${KB_PERF_SLOW_QUERY:1000}

  # ========== 对话系统配置 ==========
  chat:
    # 消息约束配置
    message:
      # 单条消息最大长度（字符数）
      max-length: ${CHAT_MSG_MAX_LENGTH:32000}
      # 上下文中最大消息数量
      max-context-messages: ${CHAT_MSG_MAX_CONTEXT:50}
      # 上下文最大令牌数
      max-context-tokens: ${CHAT_MSG_MAX_TOKENS:8000}
      # 是否启用消息内容验证
      enable-validation: ${CHAT_MSG_VALIDATION:true}
      # 是否自动截断过长消息
      auto-truncate: ${CHAT_MSG_AUTO_TRUNCATE:true}
      # 被阻止的内容模式列表
      blocked-patterns:
        - spam
        - abuse
        - advertisement

    # 知识检索配置
    knowledge-retrieval:
      # 检索结果数量
      top-k: ${CHAT_KB_TOP_K:5}
      # 相似度阈值
      threshold: ${CHAT_KB_THRESHOLD:0.7}
      # 是否启用上下文增强
      enable-context-enrichment: ${CHAT_KB_CONTEXT_ENRICHMENT:true}
      # 最大检索字符数
      max-retrieved-chars: ${CHAT_KB_MAX_CHARS:4000}
      # 检索超时时间（毫秒）
      retrieval-timeout-ms: ${CHAT_KB_TIMEOUT:5000}
      # 是否启用引用功能
      enable-citation: ${CHAT_KB_CITATION:true}
      # 引用格式
      citation-format: ${CHAT_KB_CITATION_FORMAT:markdown}

    # AI功能配置
    ai-features:
      # 是否启用语义分析
      enable-semantic-analysis: ${CHAT_AI_SEMANTIC:true}
      # 是否启用情感检测
      enable-sentiment-detection: ${CHAT_AI_SENTIMENT:false}
      # 是否启用自动摘要
      enable-auto-summary: ${CHAT_AI_SUMMARY:true}
      # 回复风格：conservative（保守）、balanced（平衡）、creative（创意）
      response-style: ${CHAT_AI_STYLE:balanced}
      # 创造性水平（0.0-1.0）
      creativity-level: ${CHAT_AI_CREATIVITY:0.7}
      # 安全等级：low、medium、high
      safety-level: ${CHAT_AI_SAFETY:high}
      # 支持的语言列表
      supported-languages:
        - zh
        - en
        - ja
        - ko
      # 默认语言
      default-language: ${CHAT_AI_DEFAULT_LANG:zh}

  # ========== 大语言模型服务配置 ==========
  llm:
    # 默认服务提供商 (openai/claude/qwen)
    default-provider: ${LLM_DEFAULT_PROVIDER:openai}
    # 是否启用故障转移 - 当主要服务不可用时自动切换
    failover-enabled: ${LLM_FAILOVER_ENABLED:true}
    # 负载均衡策略：round_robin(轮询)、random(随机)、weighted(权重)
    load-balancing: ${LLM_LOAD_BALANCING:round_robin}

    # OpenAI 配置
    openai:
      enabled: ${LLM_OPENAI_ENABLED:true}
      # API基础URL，支持代理服务 (国内可用的代理地址)
      base-url: ${LLM_OPENAI_BASE_URL:https://api.openai-hk.com}
      # API密钥 (请替换为您的真实密钥)
      api-key: ${LLM_OPENAI_API_KEY:hk-5y2tsx100002516783d25a5427af18502616fb030a23be51}
      # 组织ID（可选，企业用户需要）
      organization: ${LLM_OPENAI_ORG_ID:}
      # 请求超时时间 (ISO-8601格式，PT2M表示2分钟)
      timeout: ${LLM_OPENAI_TIMEOUT:PT2M}
      # 最大重试次数
      max-retries: ${LLM_OPENAI_MAX_RETRIES:3}
      # 支持的模型列表
      models:
        - gpt-4o                    # 最新多模态模型
        - gpt-4o-mini              # 轻量版GPT-4
        - gpt-4-turbo              # GPT-4加速版
        - gpt-4                    # 经典GPT-4
        - gpt-3.5-turbo            # 性价比之王
        - text-embedding-3-small   # 向量化模型(小)
        - text-embedding-3-large   # 向量化模型(大)

    # Anthropic Claude 配置
    anthropic:
      enabled: ${LLM_ANTHROPIC_ENABLED:false}
      # Anthropic Claude API密钥 (需要到Anthropic官网申请)
      api-key: ${LLM_ANTHROPIC_API_KEY:}
      # API基础URL (官方地址)
      base-url: ${LLM_ANTHROPIC_BASE_URL:https://api.anthropic.com}
      # 请求超时时间 (Anthropic Claude响应较慢，建议3分钟)
      timeout: ${LLM_ANTHROPIC_TIMEOUT:PT3M}
      # 最大重试次数
      max-retries: ${LLM_ANTHROPIC_MAX_RETRIES:2}
      # 支持的模型列表
      models:
        - claude-3-haiku-20240307     # 最快速度，最低成本
        - claude-3-sonnet-20240229    # 平衡性能与速度
        - claude-3-opus-20240229      # 最高性能
        - claude-3-5-sonnet-20241022  # 最新版本
        - claude-3-5-sonnet-20240620  # 稳定版本

    # 阿里云通义千问 (Qwen) 配置
    qwen:
      enabled: ${LLM_QWEN_ENABLED:true}
      # API基础URL，通义千问的DashScope服务地址
      base-url: ${LLM_QWEN_BASE_URL:https://dashscope.aliyuncs.com}
      # API密钥 (请到阿里云控制台获取)
      api-key: ${LLM_QWEN_API_KEY:sk-xxxxxxxxxxxxxxxxxxxxxxxx}
      # 请求超时时间
      timeout: ${LLM_QWEN_TIMEOUT:PT2M}
      # 最大重试次数
      max-retries: ${LLM_QWEN_MAX_RETRIES:3}
      # 支持的模型列表
      models:
        # 主力聊天模型
        - qwen-plus                  # 推荐：性能与成本平衡
        - qwen-turbo                 # 高速响应，成本最低
        - qwen-max                   # 最强性能，复杂任务首选
        - qwen-max-longcontext       # 长文本处理专用

        # 专业模型
        - qwen-coder                 # 代码生成和理解
        - qwen-math                  # 数学推理专用

        # 多模态模型
        - qwen-vl-plus              # 图像理解
        - qwen-vl-max               # 高级视觉理解

        # 向量化模型
        - text-embedding-v2          # 文本向量化
        - text-embedding-v3          # 新版向量化

    # 默认模型参数
    default-parameters:
      # 默认使用的模型
      model: ${LLM_DEFAULT_MODEL:gpt-3.5-turbo}
      # 温度参数，控制回答的创造性 (0.0-2.0，越高越有创意)
      temperature: ${LLM_DEFAULT_TEMPERATURE:0.7}
      # 最大生成令牌数
      max-tokens: ${LLM_DEFAULT_MAX_TOKENS:1000}
      # Top-p 采样参数 (0.0-1.0，控制候选词范围)
      top-p: ${LLM_DEFAULT_TOP_P:1.0}
      # 频率惩罚参数 (减少重复内容)
      frequency-penalty: ${LLM_DEFAULT_FREQ_PENALTY:0.0}
      # 存在惩罚参数 (鼓励谈论新话题)
      presence-penalty: ${LLM_DEFAULT_PRES_PENALTY:0.0}

    # 模型特定参数
    model-specific-parameters:
      # GPT-4: 温度稍低，确保准确性
      'gpt-4':
        temperature: 0.5
        max-tokens: 2000
      # GPT-3.5: 默认平衡设置
      '[gpt-3.5-turbo]':
        temperature: 0.7
        max-tokens: 1000
      # 通义千问Plus: 平衡设置
      'qwen-plus':
        temperature: 0.7
        max-tokens: 2000
      # 通义千问Max: 低温度，确保质量
      'qwen-max':
        temperature: 0.5
        max-tokens: 4000
      # 代码模型: 极低温度，确保准确性
      'qwen-coder':
        temperature: 0.2
        max-tokens: 4000
      'claude-3-haiku-20240307':
        temperature: 0.7
        max-tokens: 4000
      'claude-3-sonnet-20240229':
        temperature: 0.6
        max-tokens: 4000
      'claude-3-opus-20240229':
        temperature: 0.5
        max-tokens: 4000
      'claude-3-5-sonnet-20241022':
        temperature: 0.6
        max-tokens: 8000
      'claude-3-5-sonnet-20240620':
        temperature: 0.6
        max-tokens: 8000

    # 高级功能配置
    features:
      # 是否启用流式响应 (提供更好的用户体验)
      enable-streaming: ${LLM_ENABLE_STREAMING:true}
      # 是否启用函数调用 (Agent功能必需)
      enable-function-calling: ${LLM_ENABLE_FUNCTIONS:true}
      # 是否启用响应缓存 (提高性能，降低成本)
      enable-response-cache: ${LLM_ENABLE_CACHE:true}
      # 响应缓存时间（秒）
      response-cache-ttl: ${LLM_CACHE_TTL:3600}

  # ========== 邮件服务配置 ==========
  email:
    # 基本发送配置
    sender:
      # 默认发件人地址
      from-address: ${EMAIL_FROM:noreply@baseai.com}
      # 默认发件人名称
      from-name: ${EMAIL_FROM_NAME:BaseAI系统}
      # 回复地址
      reply-to: ${EMAIL_REPLY_TO:support@baseai.com}
      # 退信地址
      bounce-address: ${EMAIL_BOUNCE:bounce@baseai.com}
      # 字符编码
      charset: ${EMAIL_CHARSET:UTF-8}
      # 是否启用HTML格式
      enable-html: ${EMAIL_ENABLE_HTML:true}
      # 是否启用邮件跟踪
      enable-tracking: ${EMAIL_ENABLE_TRACKING:false}

    # 投递设置
    delivery:
      # 是否启用异步发送
      enable-async: ${EMAIL_ASYNC:true}
      # 异步队列大小
      async-queue-size: ${EMAIL_ASYNC_QUEUE:1000}
      # 最大重试次数
      max-retry-attempts: ${EMAIL_MAX_RETRY:3}
      # 重试延迟时间（秒）
      retry-delays:
        - 60    # 第一次重试：1分钟后
        - 300   # 第二次重试：5分钟后
        - 900   # 第三次重试：15分钟后
      # 批量发送大小
      batch-size: ${EMAIL_BATCH_SIZE:50}
      # 批量发送间隔（毫秒）
      batch-delay-ms: ${EMAIL_BATCH_DELAY:100}
      # 投递超时时间（秒）
      delivery-timeout-seconds: ${EMAIL_DELIVERY_TIMEOUT:30}
      # 是否启用死信队列
      enable-dead-letter-queue: ${EMAIL_ENABLE_DLQ:true}

    # 模板配置
    template:
      # 是否启用模板功能
      enabled: ${EMAIL_TEMPLATE_ENABLED:true}
      # 模板缓存时间（秒）
      cache-ttl-seconds: ${EMAIL_TEMPLATE_CACHE_TTL:3600}
      # 默认模板
      default-template: ${EMAIL_DEFAULT_TEMPLATE:system-notification}
      # 模板文件位置
      location: ${EMAIL_TEMPLATE_LOCATION:classpath:/email-templates/}
      # 是否启用模板缓存
      cache-enabled: ${EMAIL_TEMPLATE_CACHE_ENABLED:true}
      # 支持的模板格式
      supported-formats:
        - html
        - text
      # 是否自动生成纯文本版本
      auto-generate-text: ${EMAIL_AUTO_TEXT:true}
      # 全局模板变量
      global-variables:
        system-name: BaseAI
        support-email: support@baseai.com
        website-url: https://baseai.com

  # ========== 短信服务配置 ==========
  sms:
    # 服务提供商配置
    provider:
      # 主要服务商
      primary: ${SMS_PRIMARY_PROVIDER:aliyun}
      # 备用服务商列表
      fallback-providers:
        - tencent
        - huawei
      # 是否启用故障转移
      enable-fallback: ${SMS_ENABLE_FALLBACK:true}
      # 故障转移阈值（连续失败次数）
      failover-threshold: ${SMS_FAILOVER_THRESHOLD:3}
      # 服务商权重配置（用于负载均衡）
      weights:
        aliyun: 70
        tencent: 20
        huawei: 10

    # 阿里云短信配置
    aliyun:
      access-key: ${SMS_ALIYUN_ACCESS_KEY:}
      access-secret: ${SMS_ALIYUN_ACCESS_SECRET:}
      signature: ${SMS_ALIYUN_SIGNATURE:BaseAI}
      region: ${SMS_ALIYUN_REGION:cn-hangzhou}

    # 腾讯云短信配置
    tencent:
      secret-id: ${SMS_TENCENT_SECRET_ID:}
      secret-key: ${SMS_TENCENT_SECRET_KEY:}
      signature: ${SMS_TENCENT_SIGNATURE:BaseAI}
      region: ${SMS_TENCENT_REGION:ap-guangzhou}

    # 发送限制配置
    rate-limits:
      # 全局限制
      global:
        per-minute: ${SMS_GLOBAL_PER_MINUTE:100}
        per-hour: ${SMS_GLOBAL_PER_HOUR:1000}
        per-day: ${SMS_GLOBAL_PER_DAY:5000}
      # 用户级别限制
      user:
        per-minute: ${SMS_USER_PER_MINUTE:5}
        per-hour: ${SMS_USER_PER_HOUR:20}
        per-day: ${SMS_USER_PER_DAY:100}
      # 手机号级别限制
      phone:
        per-minute: ${SMS_PHONE_PER_MINUTE:1}
        per-hour: ${SMS_PHONE_PER_HOUR:10}
        per-day: ${SMS_PHONE_PER_DAY:20}

    # 内容配置
    content:
      # 重复检测时间（分钟），防止重复发送
      duplicate-check-minutes: ${SMS_DUPLICATE_CHECK:2}
      # 失败后启用验证码的次数
      enable-captcha-after-failures: ${SMS_CAPTCHA_THRESHOLD:3}
      # 短信模板配置
      templates:
        verification-code:
          template-id: ${SMS_TEMPLATE_VERIFICATION:SMS_123456}
          content: "您的验证码是{code}，有效期{expire}分钟，请勿泄露。"
          params:
            - code
            - expire
        security-alert:
          template-id: ${SMS_TEMPLATE_SECURITY:SMS_789012}
          content: "您的账户在{time}发生{action}操作，如非本人操作请及时联系客服。"
          params:
            - time
            - action
        notification:
          template-id: ${SMS_TEMPLATE_NOTIFICATION:SMS_345678}
          content: "系统通知：{message}"
          params:
            - message

  # ========== 审计系统配置 ==========
  audit:
    # 日志记录配置
    logging:
      # 是否启用异步处理
      enable-async: ${AUDIT_ASYNC:true}
      # 异步队列大小
      async-queue-size: ${AUDIT_QUEUE_SIZE:10000}
      # 批量处理大小
      batch-size: ${AUDIT_BATCH_SIZE:100}
      # 批量处理超时时间（毫秒）
      batch-timeout-ms: ${AUDIT_BATCH_TIMEOUT:5000}
      # 是否启用压缩
      enable-compression: ${AUDIT_COMPRESSION:true}
      # 需要记录的日志级别
      log-levels:
        - ERROR
        - WARN
        - INFO
        - DEBUG
      # 敏感字段列表（将被屏蔽）
      sensitive-fields:
        - password
        - token
        - key
        - secret
        - apiKey
      # 是否启用字段屏蔽
      enable-field-masking: ${AUDIT_FIELD_MASKING:true}

    # 数据保留策略
    retention:
      # 默认保留天数（7年）
      default-days: ${AUDIT_RETENTION_DAYS:2555}
      # 按级别的保留策略
      by-level:
        ERROR: ${AUDIT_RETENTION_ERROR:3650}   # 错误日志保留10年
        WARN: ${AUDIT_RETENTION_WARN:1825}     # 警告日志保留5年
        INFO: ${AUDIT_RETENTION_INFO:365}      # 信息日志保留1年
        DEBUG: ${AUDIT_RETENTION_DEBUG:30}     # 调试日志保留30天
      # 是否启用自动归档
      enable-auto-archive: ${AUDIT_AUTO_ARCHIVE:true}
      # 归档阈值天数
      archive-after-days: ${AUDIT_ARCHIVE_AFTER:365}
      # 归档压缩方式
      archive-compression: ${AUDIT_ARCHIVE_COMPRESSION:gzip}
      # 彻底删除阈值天数
      purge-after-days: ${AUDIT_PURGE_AFTER:2555}
      # 是否启用法律保留
      enable-legal-hold: ${AUDIT_LEGAL_HOLD:true}

    # Elasticsearch存储配置
    elasticsearch:
      # 是否启用ES存储
      enabled: ${AUDIT_ES_ENABLED:true}
      # 索引名称前缀
      index-prefix: ${AUDIT_ES_INDEX_PREFIX:baseai-audit}
      # 索引模板名称
      index-template: ${AUDIT_ES_TEMPLATE:audit-template}
      # 每个索引的分片数
      shards-per-index: ${AUDIT_ES_SHARDS:1}
      # 每个索引的副本数
      replicas-per-index: ${AUDIT_ES_REPLICAS:1}
      # 刷新间隔
      refresh-interval: ${AUDIT_ES_REFRESH:30s}
      # 是否启用索引生命周期管理
      enable-ilm: ${AUDIT_ES_ILM:true}
      # 生命周期管理策略
      ilm-policy:
        hot-phase-days: 7     # 热阶段：7天
        warm-phase-days: 30   # 温阶段：30天
        cold-phase-days: 90   # 冷阶段：90天
        delete-phase-days: 2555 # 删除阶段：7年

    # 完整性检查配置
    integrity:
      # 是否启用完整性检查
      enabled: ${AUDIT_INTEGRITY_ENABLED:true}
      # 检查调度表达式（每天凌晨2点）
      schedule: ${AUDIT_INTEGRITY_SCHEDULE:0 2 * * *}
      # 检查方式：checksum、count、sampling
      check-method: ${AUDIT_INTEGRITY_METHOD:checksum}
      # 采样检查比例（当使用sampling方法时）
      sampling-ratio: ${AUDIT_INTEGRITY_SAMPLING:0.1}

    # 报告配置
    reporting:
      # 是否启用报告功能
      enabled: ${AUDIT_REPORT_ENABLED:true}
      # 报告输出位置
      output-location: ${AUDIT_REPORT_OUTPUT:/tmp/audit-reports/}
      # 报告格式：PDF、EXCEL、CSV
      default-format: ${AUDIT_REPORT_FORMAT:PDF}
      # 自动报告调度（每月1号生成月度报告）
      auto-schedule: ${AUDIT_REPORT_SCHEDULE:0 0 1 * *}
      # 报告保留天数
      report-retention-days: ${AUDIT_REPORT_RETENTION:365}

  # ========== 缓存配置 ==========
  cache:
    # Redis缓存配置
    redis:
      # 默认过期时间（秒），默认 1 小时
      default-ttl-seconds: ${CACHE_REDIS_DEFAULT_TTL:3600}
      # 最大过期时间（秒），最大 24 小时
      max-ttl-seconds: ${CACHE_REDIS_MAX_TTL:86400}
      # 键名前缀
      key-prefix: ${CACHE_REDIS_PREFIX:baseai:}
      # 是否启用压缩
      enable-compression: ${CACHE_REDIS_COMPRESSION:true}
      # 压缩阈值（字节）
      compression-threshold-bytes: ${CACHE_REDIS_COMPRESSION_THRESHOLD:1024}
      # 最大键名长度
      max-key-length: ${CACHE_REDIS_MAX_KEY_LENGTH:250}

    # 应用级缓存配置
    application:
      # 配置缓存过期时间（秒）
      config-cache-ttl-seconds: ${CACHE_APP_CONFIG_TTL:300}
      # 用户会话缓存过期时间（秒）
      user-session-cache-ttl-seconds: ${CACHE_APP_SESSION_TTL:1800}
      # API响应缓存过期时间（秒）
      api-response-cache-ttl-seconds: ${CACHE_APP_API_TTL:60}
      # 静态内容缓存过期时间（秒）
      static-content-cache-ttl-seconds: ${CACHE_APP_STATIC_TTL:3600}
      # 是否启用缓存预热
      enable-cache-warming: ${CACHE_APP_WARMING:true}
      # 缓存预热调度表达式（每6小时）
      cache-warming-schedule: ${CACHE_APP_WARMING_SCHEDULE:0 0 */6 * * *}
      # 最大缓存大小（MB）
      max-cache-size-mb: ${CACHE_APP_MAX_SIZE:512}
      # 缓存淘汰策略：LRU、LFU、FIFO
      eviction-policy: ${CACHE_APP_EVICTION:LRU}

  # ========== 异步处理配置 ==========
  async:
    # 线程池核心大小
    core-pool-size: ${ASYNC_CORE_POOL_SIZE:2}
    # 线程池最大大小
    max-pool-size: ${ASYNC_MAX_POOL_SIZE:8}
    # 队列容量
    queue-capacity: ${ASYNC_QUEUE_CAPACITY:500}
    # 线程名称前缀
    thread-name-prefix: "BaseAI-Async-"
    # 线程保活时间（秒）
    keep-alive-seconds: ${ASYNC_KEEP_ALIVE:60}
    # 是否允许核心线程超时
    allow-core-thread-timeout: ${ASYNC_ALLOW_CORE_TIMEOUT:true}
    # 拒绝策略：ABORT、CALLER_RUNS、DISCARD、DISCARD_OLDEST
    rejection-policy: ${ASYNC_REJECTION_POLICY:CALLER_RUNS}

  # ========== 定时任务调度器配置 ==========
  scheduling:
    # 全局开关：是否启用定时任务功能
    enabled: true
    # 线程池配置
    pool:
      # 线程池大小（核心线程数5-10-15-50）
      size: 15
      # 是否允许核心线程超时（true：空闲线程会被回收，节省资源；false：核心线程始终保持活跃状态）
      allow-core-thread-timeout: false
      # 线程空闲时间（秒），当 allow-core-thread-timeout 为 true 时生效
      keep-alive-seconds: 60
    # 线程配置
    thread:
      # 线程名称前缀
      name-prefix: "BaseAI-Scheduled-"
      # 线程优先级 (1-10)
      priority: 5
    # 关闭行为配置
    shutdown:
      # 应用关闭时是否等待正在执行的任务完成
      wait-for-tasks-to-complete: true
      # 等待任务完成的最长时间（秒）
      await-termination-seconds: 120

  # ========== 文件存储配置 ==========
  storage:
    # 本地存储配置
    local:
      # 是否启用本地存储
      enabled: ${STORAGE_LOCAL_ENABLED:true}
      # 存储根路径
      base-path: ${STORAGE_LOCAL_BASE_PATH:./storage}
      # 单个文件最大大小
      max-file-size: ${STORAGE_LOCAL_MAX_SIZE:10MB}
      # 允许的文件类型
      allowed-types:
        - pdf
        - txt
        - md
        - docx
        - doc
        - jpg
        - jpeg
        - png
        - gif
      # 是否启用文件校验
      enable-checksum: ${STORAGE_LOCAL_CHECKSUM:true}
      # 校验算法：MD5、SHA1、SHA256
      checksum-algorithm: ${STORAGE_LOCAL_CHECKSUM_ALG:SHA256}

    # 云存储配置（可选）
    cloud:
      # 是否启用云存储
      enabled: ${STORAGE_CLOUD_ENABLED:false}
      # 云存储提供商：oss、s3、cos等
      provider: ${STORAGE_CLOUD_PROVIDER:oss}
      # 服务端点
      endpoint: ${STORAGE_CLOUD_ENDPOINT:}
      # 访问密钥
      access-key: ${STORAGE_CLOUD_ACCESS_KEY:}
      # 密钥
      secret-key: ${STORAGE_CLOUD_SECRET_KEY:}
      # 存储桶名称
      bucket: ${STORAGE_CLOUD_BUCKET:baseai-storage}
      # 是否启用CDN加速
      enable-cdn: ${STORAGE_CLOUD_CDN:false}
      # CDN域名
      cdn-domain: ${STORAGE_CLOUD_CDN_DOMAIN:}

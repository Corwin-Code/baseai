/******************************************************************************
 * AI向量存储扩展及向量型字段DDL
 *
 * 说明：
 * 1. pgvector 是 PostgreSQL 用于 AI 向量数据存储与检索的官方扩展，支持 float4/float8 向量。
 * 2. vector 类型字段必须依赖该扩展。常用于 embedding、向量检索场景（如RAG）。
 * 3. 创建扩展只需一次，数据库级生效。如已存在不会报错。
 ******************************************************************************/

CREATE EXTENSION IF NOT EXISTS vector;
-- 注释: 安装 PostgreSQL 向量数据类型扩展 pgvector，为 embedding 字段支持

/******************************************************************************
 * 三元组模糊全文检索扩展及索引
 *
 * 说明：
 * 1. pg_trgm 是 PostgreSQL 的官方扩展，支持基于“三元组(trigram)”的模糊全文检索，
 *    能极大加速 ILIKE/%LIKE%/模糊搜索。
 * 2. gin_trgm_ops 是专为 GIN 索引设计的操作符类，需要 pg_trgm 扩展支持。
 * 3. 创建扩展只需一次，数据库级生效；如已存在不会报错。
 * 4. 索引建议用于文本字段较长、搜索量大的表，例如 kb_chunks.text。
 ******************************************************************************/

CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- 注释: 创建 PostgreSQL 三元组（trigram）模糊检索扩展，为 gin_trgm_ops 操作符做准备

------------------------------------------------------------------------------

/******************************************************************************
 * 字典表模块（枚举/常量表）
 ******************************************************************************/

/** 文档来源类型字典表 */
CREATE TABLE IF NOT EXISTS dict_source_types
(
    code  VARCHAR(32) PRIMARY KEY, -- 来源类型编码
    label VARCHAR(64) NOT NULL     -- 来源类型显示名
);
COMMENT ON TABLE dict_source_types IS '文档来源类型字典（如PDF、URL、Markdown等）';
COMMENT ON COLUMN dict_source_types.code IS '来源类型编码（如PDF、URL等）';
COMMENT ON COLUMN dict_source_types.label IS '来源类型显示名';

/** LLM模型类型及计费字典表 */
CREATE TABLE IF NOT EXISTS dict_models
(
    code       VARCHAR(32) PRIMARY KEY, -- 模型编码
    label      VARCHAR(64) NOT NULL,    -- 模型显示名称
    max_tokens INT,                     -- 最大token数
    price_in   NUMERIC(10, 4),          -- 输入单价
    price_out  NUMERIC(10, 4)           -- 输出单价
);
COMMENT ON TABLE dict_models IS '大语言模型类型字典，包含最大token和计费信息';
COMMENT ON COLUMN dict_models.code IS '模型编码（如gpt-4o、glm-4等）';
COMMENT ON COLUMN dict_models.label IS '模型显示名称';
COMMENT ON COLUMN dict_models.max_tokens IS '该模型支持的最大tokens数';
COMMENT ON COLUMN dict_models.price_in IS '输入tokens单价（USD）';
COMMENT ON COLUMN dict_models.price_out IS '输出tokens单价（USD）';

/** 对话角色类型字典表 */
CREATE TABLE IF NOT EXISTS dict_roles
(
    code  VARCHAR(16) PRIMARY KEY, -- 角色代码
    label VARCHAR(32) NOT NULL     -- 显示名称
);
COMMENT ON TABLE dict_roles IS '对话角色类型';
COMMENT ON COLUMN dict_roles.code IS '角色代码（如USER/ASSISTANT等）';
COMMENT ON COLUMN dict_roles.label IS '显示名称';

/** 流程节点类型字典表 */
CREATE TABLE IF NOT EXISTS dict_flow_node_types
(
    code  VARCHAR(32) PRIMARY KEY, -- 节点类型代码
    label VARCHAR(64) NOT NULL     -- 显示名称
);
COMMENT ON TABLE dict_flow_node_types IS '流程节点类型字典';
COMMENT ON COLUMN dict_flow_node_types.code IS '节点类型代码（如RETRIEVER、LLM等）';
COMMENT ON COLUMN dict_flow_node_types.label IS '节点类型名称';

------------------------------------------------------------------------------

/******************************************************************************
 * 系统设置/平台全局参数
 ******************************************************************************/
CREATE TABLE IF NOT EXISTS sys_settings
(
    key        VARCHAR(64) PRIMARY KEY, -- 参数唯一key
    value      TEXT        NOT NULL,    -- 参数值
    value_type VARCHAR(16) NOT NULL,    -- 类型（string/int/bool/json等）
    remark     VARCHAR(255),            -- 说明
    updated_by BIGINT,
    updated_at TIMESTAMPTZ DEFAULT now()
);
COMMENT ON TABLE sys_settings IS '平台全局配置参数表';
COMMENT ON COLUMN sys_settings.key IS '参数唯一Key';
COMMENT ON COLUMN sys_settings.value IS '参数内容';
COMMENT ON COLUMN sys_settings.value_type IS '参数值类型';
COMMENT ON COLUMN sys_settings.remark IS '参数说明';
COMMENT ON COLUMN sys_settings.updated_by IS '最近修改人ID';
COMMENT ON COLUMN sys_settings.updated_at IS '最近修改时间';

------------------------------------------------------------------------------

/******************************************************************************
 * 用户、租户、角色与多对多
 ******************************************************************************/

/** 用户表 */
CREATE TABLE IF NOT EXISTS sys_users
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username      VARCHAR(64) UNIQUE NOT NULL,
    password_hash VARCHAR(128)       NOT NULL,
    email         VARCHAR(128) UNIQUE,
    avatar_url    VARCHAR(256),
    last_login_at TIMESTAMPTZ,
    created_at    TIMESTAMPTZ DEFAULT now(),
    updated_at    TIMESTAMPTZ DEFAULT now(),
    deleted_at    TIMESTAMPTZ
);
COMMENT ON TABLE sys_users IS '系统用户主表（与租户无直接关联，多对多在sys_user_tenants维护）';
COMMENT ON COLUMN sys_users.id IS '用户ID';
COMMENT ON COLUMN sys_users.username IS '用户名';
COMMENT ON COLUMN sys_users.password_hash IS '密码哈希值';
COMMENT ON COLUMN sys_users.email IS '邮箱地址';
COMMENT ON COLUMN sys_users.avatar_url IS '用户头像URL';
COMMENT ON COLUMN sys_users.last_login_at IS '最近登录时间';
COMMENT ON COLUMN sys_users.created_at IS '用户创建时间';
COMMENT ON COLUMN sys_users.updated_at IS '用户更新时间';
COMMENT ON COLUMN sys_users.deleted_at IS '软删除时间';

/** 租户表 */
CREATE TABLE IF NOT EXISTS sys_tenants
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    org_name   VARCHAR(128) NOT NULL,
    plan_code  VARCHAR(32),
    expire_at  TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ
);
COMMENT ON TABLE sys_tenants IS 'SaaS租户信息表';
COMMENT ON COLUMN sys_tenants.id IS '租户ID';
COMMENT ON COLUMN sys_tenants.org_name IS '组织名称';
COMMENT ON COLUMN sys_tenants.plan_code IS '套餐代码';
COMMENT ON COLUMN sys_tenants.expire_at IS '到期时间';
COMMENT ON COLUMN sys_tenants.created_at IS '创建时间';
COMMENT ON COLUMN sys_tenants.updated_at IS '更新时间';
COMMENT ON COLUMN sys_tenants.deleted_at IS '软删除时间';

/** 角色表 */
CREATE TABLE IF NOT EXISTS sys_roles
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  VARCHAR(64) NOT NULL UNIQUE,
    label VARCHAR(64) NOT NULL
);
COMMENT ON TABLE sys_roles IS '角色权限表';
COMMENT ON COLUMN sys_roles.id IS '角色ID';
COMMENT ON COLUMN sys_roles.name IS '角色名';
COMMENT ON COLUMN sys_roles.label IS '显示名称';

/** 用户-租户多对多表（维护租户成员、租户内角色与状态） */
CREATE TABLE IF NOT EXISTS sys_user_tenants
(
    user_id   BIGINT NOT NULL,       -- 用户ID
    tenant_id BIGINT NOT NULL,       -- 租户ID
    role_id   BIGINT,                -- 在租户下的角色ID
    status    SMALLINT    DEFAULT 1, -- 状态：1=正常，0=禁用，2=邀请中
    joined_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (user_id, tenant_id),
    FOREIGN KEY (user_id) REFERENCES sys_users (id) ON DELETE CASCADE,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES sys_roles (id) ON DELETE SET NULL
);
COMMENT ON TABLE sys_user_tenants IS '用户与租户多对多关联表，支持租户内角色与状态';
COMMENT ON COLUMN sys_user_tenants.user_id IS '用户ID';
COMMENT ON COLUMN sys_user_tenants.tenant_id IS '租户ID';
COMMENT ON COLUMN sys_user_tenants.role_id IS '租户内角色ID';
COMMENT ON COLUMN sys_user_tenants.status IS '成员状态（1正常，0禁用，2邀请中）';
COMMENT ON COLUMN sys_user_tenants.joined_at IS '加入时间';

/** 用户-全局角色多对多表（如平台超管等，不关心租户） */
CREATE TABLE IF NOT EXISTS sys_user_roles
(
    user_id    BIGINT NOT NULL,
    role_id    BIGINT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES sys_users (id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES sys_roles (id) ON DELETE CASCADE
);
COMMENT ON TABLE sys_user_roles IS '用户与全局角色多对多关联表';
COMMENT ON COLUMN sys_user_roles.user_id IS '用户ID';
COMMENT ON COLUMN sys_user_roles.role_id IS '角色ID';
COMMENT ON COLUMN sys_user_roles.created_at IS '授权时间';

------------------------------------------------------------------------------

/******************************************************************************
 * 审计与安全日志表
 ******************************************************************************/

CREATE TABLE IF NOT EXISTS sys_audit_logs
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id       BIGINT,                     -- 操作用户
    tenant_id     BIGINT,                     -- 所属租户
    action        VARCHAR(64) NOT NULL,       -- 操作类型（如LOGIN、UPDATE、DELETE等）
    target_type   VARCHAR(64),                -- 目标对象类型（如User、Document）
    target_id     BIGINT,                     -- 目标对象主键ID
    ip_address    INET,                       -- 操作IP
    user_agent    VARCHAR(256),               -- 客户端信息
    detail        JSONB,                      -- 详细内容
    result_status VARCHAR(16),                -- 操作结果（success, fail, partial等）
    log_level     VARCHAR(16) DEFAULT 'info', -- 日志等级
    created_at    TIMESTAMPTZ DEFAULT now()
);
COMMENT ON TABLE sys_audit_logs IS '系统审计操作日志表，记录用户关键操作与安全事件';
COMMENT ON COLUMN sys_audit_logs.user_id IS '操作用户ID';
COMMENT ON COLUMN sys_audit_logs.tenant_id IS '操作所属租户ID';
COMMENT ON COLUMN sys_audit_logs.action IS '操作类型';
COMMENT ON COLUMN sys_audit_logs.target_type IS '被操作对象类型';
COMMENT ON COLUMN sys_audit_logs.target_id IS '被操作对象主键ID';
COMMENT ON COLUMN sys_audit_logs.ip_address IS '操作IP地址';
COMMENT ON COLUMN sys_audit_logs.user_agent IS '客户端User-Agent信息';
COMMENT ON COLUMN sys_audit_logs.detail IS '操作详情内容（JSON）';
COMMENT ON COLUMN sys_audit_logs.result_status IS '操作结果状态';
COMMENT ON COLUMN sys_audit_logs.log_level IS '日志等级';
COMMENT ON COLUMN sys_audit_logs.created_at IS '操作时间';

------------------------------------------------------------------------------

/******************************************************************************
 * 知识库模块（文档/分块/Embedding/标签/标签关联表）
 ******************************************************************************/

/** 知识库文档主表 */
CREATE TABLE IF NOT EXISTS kb_documents
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id      BIGINT       NOT NULL,
    title          VARCHAR(256) NOT NULL,
    source_type    VARCHAR(32)  NOT NULL REFERENCES dict_source_types (code),
    source_uri     TEXT,
    mime_type      VARCHAR(128),
    lang_code      CHAR(5)     DEFAULT 'auto',
    parsing_status SMALLINT    DEFAULT 0,
    chunk_count    INT         DEFAULT 0,
    sha256         CHAR(64) UNIQUE,
    created_by     BIGINT       NOT NULL,
    updated_by     BIGINT,
    created_at     TIMESTAMPTZ DEFAULT now(),
    updated_at     TIMESTAMPTZ DEFAULT now(),
    deleted_at     TIMESTAMPTZ,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE RESTRICT,
    FOREIGN KEY (updated_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
CREATE INDEX idx_kb_document_tenant_status ON kb_documents (tenant_id, parsing_status);
COMMENT ON TABLE kb_documents IS '知识库文档主表，支持多租户、多来源、软删及内容去重';
COMMENT ON COLUMN kb_documents.id IS '文档主键ID';
COMMENT ON COLUMN kb_documents.tenant_id IS '归属租户ID';
COMMENT ON COLUMN kb_documents.title IS '文档标题';
COMMENT ON COLUMN kb_documents.source_type IS '文档来源类型编码（字典表引用）';
COMMENT ON COLUMN kb_documents.source_uri IS '文档原始地址或上传路径';
COMMENT ON COLUMN kb_documents.mime_type IS '文档MIME类型（用于选择解析器）';
COMMENT ON COLUMN kb_documents.lang_code IS '文档语言代码（如en、zh-CN，默认auto）';
COMMENT ON COLUMN kb_documents.parsing_status IS '解析状态：0待解析、1成功、2失败';
COMMENT ON COLUMN kb_documents.chunk_count IS '分块切片数量';
COMMENT ON COLUMN kb_documents.sha256 IS '文档内容SHA256哈希，防重复';
COMMENT ON COLUMN kb_documents.created_by IS '文档创建人用户ID';
COMMENT ON COLUMN kb_documents.updated_by IS '文档最近修改人用户ID';
COMMENT ON COLUMN kb_documents.created_at IS '创建时间';
COMMENT ON COLUMN kb_documents.updated_at IS '最近更新时间';
COMMENT ON COLUMN kb_documents.deleted_at IS '软删除时间';

/** 知识块（分块表） */
CREATE TABLE IF NOT EXISTS kb_chunks
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    document_id    BIGINT NOT NULL,
    chunk_no       INT    NOT NULL,
    text           TEXT   NOT NULL,
    lang_code      CHAR(5)     DEFAULT 'auto',
    token_size     INT    NOT NULL,
    vector_version INT         DEFAULT 1,
    created_by     BIGINT NOT NULL,
    updated_by     BIGINT,
    created_at     TIMESTAMPTZ DEFAULT now(),
    updated_at     TIMESTAMPTZ DEFAULT now(),
    deleted_at     TIMESTAMPTZ,
    FOREIGN KEY (document_id) REFERENCES kb_documents (id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE RESTRICT,
    FOREIGN KEY (updated_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
CREATE INDEX idx_kb_chunk_doc_no ON kb_chunks (document_id, chunk_no);
CREATE INDEX idx_kb_chunk_text_trgm ON kb_chunks USING gin (text gin_trgm_ops);
COMMENT ON TABLE kb_chunks IS '知识块分块表，支持分块、分语言、版本化';
COMMENT ON COLUMN kb_chunks.id IS '知识块主键ID';
COMMENT ON COLUMN kb_chunks.document_id IS '所属文档ID';
COMMENT ON COLUMN kb_chunks.chunk_no IS '块顺序号（分块序号，从0开始）';
COMMENT ON COLUMN kb_chunks.text IS '知识块原文内容';
COMMENT ON COLUMN kb_chunks.lang_code IS '分块语言（如en、zh-CN等）';
COMMENT ON COLUMN kb_chunks.token_size IS '知识块Token数量';
COMMENT ON COLUMN kb_chunks.vector_version IS '向量Embedding版本号';
COMMENT ON COLUMN kb_chunks.created_by IS '分块创建人用户ID';
COMMENT ON COLUMN kb_chunks.updated_by IS '分块最近修改人用户ID';
COMMENT ON COLUMN kb_chunks.created_at IS '知识块创建时间';
COMMENT ON COLUMN kb_chunks.updated_at IS '知识块更新时间';
COMMENT ON COLUMN kb_chunks.deleted_at IS '知识块软删除时间';

/** 知识块向量表 */
CREATE TABLE IF NOT EXISTS kb_embeddings
(
    chunk_id       BIGINT       NOT NULL,
    model_code     VARCHAR(32)  NOT NULL REFERENCES dict_models (code),
    vector_version INT          NOT NULL,
    embedding      VECTOR(1536) NOT NULL,
    created_by     BIGINT       NOT NULL,
    created_at     TIMESTAMPTZ DEFAULT now(),
    deleted_at     TIMESTAMPTZ,
    PRIMARY KEY (chunk_id, model_code, vector_version),
    FOREIGN KEY (chunk_id) REFERENCES kb_chunks (id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
CREATE INDEX kb_embedding_hnsw
    ON kb_embeddings USING hnsw (embedding vector_cosine_ops)
    WHERE model_code = 'gpt-4o';
COMMENT ON TABLE kb_embeddings IS '知识块向量Embedding表，支持多模型/多版本';
COMMENT ON COLUMN kb_embeddings.chunk_id IS '关联的知识块ID';
COMMENT ON COLUMN kb_embeddings.model_code IS '使用的Embedding模型代码';
COMMENT ON COLUMN kb_embeddings.vector_version IS '向量版本号';
COMMENT ON COLUMN kb_embeddings.embedding IS 'Embedding向量内容（如1536维）';
COMMENT ON COLUMN kb_embeddings.created_by IS 'Embedding生成用户ID';
COMMENT ON COLUMN kb_embeddings.created_at IS 'Embedding生成时间';
COMMENT ON COLUMN kb_embeddings.deleted_at IS 'Embedding软删除时间';

/** 标签字典表 */
CREATE TABLE IF NOT EXISTS kb_tags
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       VARCHAR(64) NOT NULL UNIQUE,
    remark     TEXT,
    created_by BIGINT,
    created_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ
);
COMMENT ON TABLE kb_tags IS '知识块标签字典表';
COMMENT ON COLUMN kb_tags.id IS '标签主键ID';
COMMENT ON COLUMN kb_tags.name IS '标签名称';
COMMENT ON COLUMN kb_tags.remark IS '标签备注';
COMMENT ON COLUMN kb_tags.created_by IS '创建人ID';
COMMENT ON COLUMN kb_tags.created_at IS '创建时间';
COMMENT ON COLUMN kb_tags.deleted_at IS '软删除时间';

/** 知识块-标签关联表 */
CREATE TABLE IF NOT EXISTS kb_chunk_tags
(
    chunk_id BIGINT NOT NULL,
    tag_id   BIGINT NOT NULL,
    PRIMARY KEY (chunk_id, tag_id),
    FOREIGN KEY (chunk_id) REFERENCES kb_chunks (id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES kb_tags (id) ON DELETE CASCADE
);
COMMENT ON TABLE kb_chunk_tags IS '知识块与标签多对多关联表';
COMMENT ON COLUMN kb_chunk_tags.chunk_id IS '知识块ID';
COMMENT ON COLUMN kb_chunk_tags.tag_id IS '标签ID';

------------------------------------------------------------------------------

/******************************************************************************
 * 流程编排模块
 ******************************************************************************/

/** 流程项目表 */
CREATE TABLE IF NOT EXISTS flow_projects
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id  BIGINT       NOT NULL,
    name       VARCHAR(128) NOT NULL,
    created_by BIGINT       NOT NULL,
    updated_by BIGINT,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE RESTRICT,
    FOREIGN KEY (updated_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_projects IS '流程项目分组表，支持多人协作';
COMMENT ON COLUMN flow_projects.id IS '流程项目ID';
COMMENT ON COLUMN flow_projects.tenant_id IS '租户ID';
COMMENT ON COLUMN flow_projects.name IS '项目名称';
COMMENT ON COLUMN flow_projects.created_by IS '项目创建人ID';
COMMENT ON COLUMN flow_projects.updated_by IS '项目最近修改人ID';
COMMENT ON COLUMN flow_projects.created_at IS '创建时间';
COMMENT ON COLUMN flow_projects.updated_at IS '更新时间';
COMMENT ON COLUMN flow_projects.deleted_at IS '软删除时间';

/** 流程定义主表 */
CREATE TABLE IF NOT EXISTS flow_definitions
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    project_id   BIGINT       NOT NULL REFERENCES flow_projects (id),
    name         VARCHAR(128) NOT NULL,
    version      INT          NOT NULL,
    is_latest    BOOLEAN     DEFAULT false,
    status       SMALLINT    DEFAULT 0,
    diagram_json JSONB,
    description  TEXT,
    created_by   BIGINT       NOT NULL,
    updated_by   BIGINT,
    created_at   TIMESTAMPTZ DEFAULT now(),
    updated_at   TIMESTAMPTZ DEFAULT now(),
    deleted_at   TIMESTAMPTZ,
    CONSTRAINT uq_flow_definition_version UNIQUE (project_id, name, version),
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE RESTRICT,
    FOREIGN KEY (updated_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_definitions IS '流程定义主表，支持多版本与状态';
COMMENT ON COLUMN flow_definitions.id IS '流程定义ID';
COMMENT ON COLUMN flow_definitions.project_id IS '归属项目ID';
COMMENT ON COLUMN flow_definitions.name IS '流程名称';
COMMENT ON COLUMN flow_definitions.version IS '流程定义版本号';
COMMENT ON COLUMN flow_definitions.is_latest IS '是否为最新版本';
COMMENT ON COLUMN flow_definitions.status IS '流程状态：0草稿/1已发布';
COMMENT ON COLUMN flow_definitions.diagram_json IS '流程可视化画布JSON';
COMMENT ON COLUMN flow_definitions.description IS '流程描述';
COMMENT ON COLUMN flow_definitions.created_by IS '流程定义创建人ID';
COMMENT ON COLUMN flow_definitions.updated_by IS '流程定义最近修改人ID';
COMMENT ON COLUMN flow_definitions.created_at IS '创建时间';
COMMENT ON COLUMN flow_definitions.updated_at IS '更新时间';
COMMENT ON COLUMN flow_definitions.deleted_at IS '软删除时间';

/** 流程节点表 */
CREATE TABLE IF NOT EXISTS flow_nodes
(
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    definition_id     BIGINT      NOT NULL REFERENCES flow_definitions (id) ON DELETE CASCADE,
    node_type_code    VARCHAR(32) NOT NULL REFERENCES dict_flow_node_types (code),
    node_key          VARCHAR(64) NOT NULL,
    name              VARCHAR(128),
    config_json       JSONB,
    retry_policy_json JSONB,
    created_by        BIGINT      NOT NULL,
    updated_by        BIGINT,
    created_at        TIMESTAMPTZ DEFAULT now(),
    updated_at        TIMESTAMPTZ DEFAULT now(),
    deleted_at        TIMESTAMPTZ,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE RESTRICT,
    FOREIGN KEY (updated_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_nodes IS '流程节点定义表，支持多类型、重试策略、统一软删';
COMMENT ON COLUMN flow_nodes.id IS '流程节点ID';
COMMENT ON COLUMN flow_nodes.definition_id IS '归属流程定义ID';
COMMENT ON COLUMN flow_nodes.node_type_code IS '节点类型编码';
COMMENT ON COLUMN flow_nodes.node_key IS '节点唯一Key';
COMMENT ON COLUMN flow_nodes.name IS '节点名称';
COMMENT ON COLUMN flow_nodes.config_json IS '节点配置JSON';
COMMENT ON COLUMN flow_nodes.retry_policy_json IS '失败重跑策略JSON';
COMMENT ON COLUMN flow_nodes.created_by IS '节点创建人ID';
COMMENT ON COLUMN flow_nodes.updated_by IS '节点最近修改人ID';
COMMENT ON COLUMN flow_nodes.created_at IS '创建时间';
COMMENT ON COLUMN flow_nodes.updated_at IS '更新时间';
COMMENT ON COLUMN flow_nodes.deleted_at IS '软删除时间';

/** 流程边表 */
CREATE TABLE IF NOT EXISTS flow_edges
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    definition_id BIGINT      NOT NULL REFERENCES flow_definitions (id) ON DELETE CASCADE,
    source_key    VARCHAR(64) NOT NULL,
    target_key    VARCHAR(64) NOT NULL,
    config_json   JSONB,
    created_by    BIGINT,
    created_at    TIMESTAMPTZ DEFAULT now(),
    deleted_at    TIMESTAMPTZ,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_edges IS '流程节点连线表';
COMMENT ON COLUMN flow_edges.id IS '流程连线ID';
COMMENT ON COLUMN flow_edges.definition_id IS '归属流程定义ID';
COMMENT ON COLUMN flow_edges.source_key IS '起始节点Key';
COMMENT ON COLUMN flow_edges.target_key IS '目标节点Key';
COMMENT ON COLUMN flow_edges.config_json IS '连线配置JSON';
COMMENT ON COLUMN flow_edges.created_by IS '连线创建人ID';
COMMENT ON COLUMN flow_edges.created_at IS '创建时间';
COMMENT ON COLUMN flow_edges.deleted_at IS '软删除时间';

/** 流程快照表 */
CREATE TABLE IF NOT EXISTS flow_snapshots
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    definition_id BIGINT NOT NULL REFERENCES flow_definitions (id),
    version       INT    NOT NULL,
    snapshot_json JSONB  NOT NULL,
    created_by    BIGINT,
    created_at    TIMESTAMPTZ DEFAULT now(),
    deleted_at    TIMESTAMPTZ,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_snapshots IS '流程定义快照表，历史版本只读冻结';
COMMENT ON COLUMN flow_snapshots.id IS '快照ID';
COMMENT ON COLUMN flow_snapshots.definition_id IS '关联流程定义ID';
COMMENT ON COLUMN flow_snapshots.version IS '快照版本号';
COMMENT ON COLUMN flow_snapshots.snapshot_json IS '流程快照JSON数据';
COMMENT ON COLUMN flow_snapshots.created_by IS '快照创建人ID';
COMMENT ON COLUMN flow_snapshots.created_at IS '快照创建时间';
COMMENT ON COLUMN flow_snapshots.deleted_at IS '软删除时间';

/** 流程运行实例表 */
CREATE TABLE IF NOT EXISTS flow_runs
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    snapshot_id BIGINT NOT NULL REFERENCES flow_snapshots (id),
    user_id     BIGINT NOT NULL REFERENCES sys_users (id),
    status      SMALLINT    DEFAULT 0,
    result_json JSONB,
    created_by  BIGINT,
    started_at  TIMESTAMPTZ DEFAULT now(),
    finished_at TIMESTAMPTZ,
    deleted_at  TIMESTAMPTZ,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_runs IS '流程运行实例表';
COMMENT ON COLUMN flow_runs.id IS '运行实例ID';
COMMENT ON COLUMN flow_runs.snapshot_id IS '流程快照ID';
COMMENT ON COLUMN flow_runs.user_id IS '发起用户ID';
COMMENT ON COLUMN flow_runs.status IS '运行状态（0待运行/1成功/2失败）';
COMMENT ON COLUMN flow_runs.result_json IS '运行结果';
COMMENT ON COLUMN flow_runs.created_by IS '创建人ID';
COMMENT ON COLUMN flow_runs.started_at IS '启动时间';
COMMENT ON COLUMN flow_runs.finished_at IS '结束时间';
COMMENT ON COLUMN flow_runs.deleted_at IS '软删除时间';

/** 流程运行日志表 */
CREATE TABLE IF NOT EXISTS flow_run_logs
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_id     BIGINT NOT NULL REFERENCES flow_runs (id) ON DELETE CASCADE,
    node_key   VARCHAR(64),
    io_json    JSONB,
    created_by BIGINT,
    created_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE flow_run_logs IS '流程运行日志表';
COMMENT ON COLUMN flow_run_logs.id IS '日志主键ID';
COMMENT ON COLUMN flow_run_logs.run_id IS '关联流程运行ID';
COMMENT ON COLUMN flow_run_logs.node_key IS '节点Key';
COMMENT ON COLUMN flow_run_logs.io_json IS '输入输出上下文JSON';
COMMENT ON COLUMN flow_run_logs.created_by IS '日志创建人ID';
COMMENT ON COLUMN flow_run_logs.created_at IS '日志创建时间';
COMMENT ON COLUMN flow_run_logs.deleted_at IS '软删除时间';

------------------------------------------------------------------------------

/******************************************************************************
 * 对话模块
 ******************************************************************************/

/** 对话线程主表 */
CREATE TABLE IF NOT EXISTS chat_threads
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id        BIGINT      NOT NULL,
    user_id          BIGINT      NOT NULL,
    title            VARCHAR(256),
    default_model    VARCHAR(32) NOT NULL REFERENCES dict_models (code),
    temperature      NUMERIC(3, 2) DEFAULT 1.00,
    flow_snapshot_id BIGINT REFERENCES flow_snapshots (id),
    created_by       BIGINT,
    updated_by       BIGINT,
    created_at       TIMESTAMPTZ   DEFAULT now(),
    updated_at       TIMESTAMPTZ   DEFAULT now(),
    deleted_at       TIMESTAMPTZ,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES sys_users (id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL,
    FOREIGN KEY (updated_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
CREATE INDEX idx_chat_thread_tenant_user ON chat_threads (tenant_id, user_id);
COMMENT ON TABLE chat_threads IS '多轮对话线程（会话）表';
COMMENT ON COLUMN chat_threads.id IS '对话主键ID';
COMMENT ON COLUMN chat_threads.tenant_id IS '归属租户ID';
COMMENT ON COLUMN chat_threads.user_id IS '归属用户ID';
COMMENT ON COLUMN chat_threads.title IS '会话标题（可空，首条消息补充）';
COMMENT ON COLUMN chat_threads.default_model IS '默认模型编码';
COMMENT ON COLUMN chat_threads.temperature IS '模型温度参数';
COMMENT ON COLUMN chat_threads.flow_snapshot_id IS '所用流程快照ID';
COMMENT ON COLUMN chat_threads.created_by IS '创建人ID';
COMMENT ON COLUMN chat_threads.updated_by IS '最近修改人ID';
COMMENT ON COLUMN chat_threads.created_at IS '创建时间';
COMMENT ON COLUMN chat_threads.updated_at IS '更新时间';
COMMENT ON COLUMN chat_threads.deleted_at IS '软删除时间';

/** 对话消息表 */
CREATE TABLE IF NOT EXISTS chat_messages
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id  BIGINT      NOT NULL REFERENCES chat_threads (id) ON DELETE CASCADE,
    role_code  VARCHAR(16) NOT NULL REFERENCES dict_roles (code),
    content    TEXT        NOT NULL,
    tool_call  JSONB,
    token_in   INT,
    token_out  INT,
    latency_ms INT,
    parent_id  BIGINT,
    created_by BIGINT,
    created_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
CREATE INDEX idx_chat_msg_thread_time ON chat_messages (thread_id, created_at DESC);
COMMENT ON TABLE chat_messages IS '对话消息表，支持函数/树状消息';
COMMENT ON COLUMN chat_messages.id IS '消息主键ID';
COMMENT ON COLUMN chat_messages.thread_id IS '所属会话线程ID';
COMMENT ON COLUMN chat_messages.role_code IS '角色类型编码';
COMMENT ON COLUMN chat_messages.content IS '消息内容';
COMMENT ON COLUMN chat_messages.tool_call IS '函数调用组件（JSONB）';
COMMENT ON COLUMN chat_messages.token_in IS 'Prompt Token数';
COMMENT ON COLUMN chat_messages.token_out IS 'Completion Token数';
COMMENT ON COLUMN chat_messages.latency_ms IS '响应延迟（ms）';
COMMENT ON COLUMN chat_messages.parent_id IS '父消息ID（支持树状结构/流式函数）';
COMMENT ON COLUMN chat_messages.created_by IS '消息创建人ID';
COMMENT ON COLUMN chat_messages.created_at IS '消息生成时间';
COMMENT ON COLUMN chat_messages.deleted_at IS '消息软删除时间';

/** 消息-知识块引用表 */
CREATE TABLE IF NOT EXISTS chat_citations
(
    message_id BIGINT      NOT NULL,
    chunk_id   BIGINT      NOT NULL,
    score      NUMERIC(6, 4),
    model_code VARCHAR(32) NOT NULL REFERENCES dict_models (code),
    PRIMARY KEY (message_id, chunk_id, model_code),
    FOREIGN KEY (message_id) REFERENCES chat_messages (id) ON DELETE CASCADE,
    FOREIGN KEY (chunk_id) REFERENCES kb_chunks (id) ON DELETE CASCADE
);
COMMENT ON TABLE chat_citations IS '消息引用的知识块及相关检索模型信息表';
COMMENT ON COLUMN chat_citations.message_id IS '对话消息ID';
COMMENT ON COLUMN chat_citations.chunk_id IS '被引用的知识块ID';
COMMENT ON COLUMN chat_citations.score IS '检索相关分数';
COMMENT ON COLUMN chat_citations.model_code IS '检索模型代码';

/** 每日用量&账单表 */
CREATE TABLE IF NOT EXISTS chat_usage_daily
(
    stat_date         DATE        NOT NULL,
    tenant_id         BIGINT      NOT NULL,
    model_code        VARCHAR(32) NOT NULL,
    prompt_tokens     BIGINT,
    completion_tokens BIGINT,
    cost_usd          NUMERIC(10, 4),
    PRIMARY KEY (stat_date, tenant_id, model_code)
);
COMMENT ON TABLE chat_usage_daily IS '每日模型调用量与账单统计表';
COMMENT ON COLUMN chat_usage_daily.stat_date IS '统计日期';
COMMENT ON COLUMN chat_usage_daily.tenant_id IS '租户ID';
COMMENT ON COLUMN chat_usage_daily.model_code IS '模型代码';
COMMENT ON COLUMN chat_usage_daily.prompt_tokens IS '输入tokens总数';
COMMENT ON COLUMN chat_usage_daily.completion_tokens IS '输出tokens总数';
COMMENT ON COLUMN chat_usage_daily.cost_usd IS '当日总计费用（USD）';

------------------------------------------------------------------------------

/******************************************************************************
 * 任务/队列/异步处理
 ******************************************************************************/

CREATE TABLE IF NOT EXISTS sys_tasks
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id   BIGINT,
    task_type   VARCHAR(64) NOT NULL,  -- 任务类型（如DOC_PARSE、EMBEDDING等）
    payload     JSONB       NOT NULL,  -- 任务参数与内容
    status      SMALLINT    DEFAULT 0, -- 状态（0待执行/1处理中/2成功/3失败）
    retry_count INT         DEFAULT 0,
    last_error  TEXT,
    created_by  BIGINT,
    created_at  TIMESTAMPTZ DEFAULT now(),
    updated_at  TIMESTAMPTZ DEFAULT now(),
    executed_at TIMESTAMPTZ,
    finished_at TIMESTAMPTZ,
    deleted_at  TIMESTAMPTZ,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE SET NULL,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
CREATE INDEX idx_sys_tasks_status ON sys_tasks (status);
COMMENT ON TABLE sys_tasks IS '异步任务/队列表，支持通用调度、追踪与重试';
COMMENT ON COLUMN sys_tasks.id IS '任务ID';
COMMENT ON COLUMN sys_tasks.tenant_id IS '租户ID';
COMMENT ON COLUMN sys_tasks.task_type IS '任务类型';
COMMENT ON COLUMN sys_tasks.payload IS '任务参数与内容';
COMMENT ON COLUMN sys_tasks.status IS '任务状态';
COMMENT ON COLUMN sys_tasks.retry_count IS '已重试次数';
COMMENT ON COLUMN sys_tasks.last_error IS '最近一次失败原因';
COMMENT ON COLUMN sys_tasks.created_by IS '任务创建人ID';
COMMENT ON COLUMN sys_tasks.created_at IS '任务创建时间';
COMMENT ON COLUMN sys_tasks.updated_at IS '任务更新时间';
COMMENT ON COLUMN sys_tasks.executed_at IS '实际开始执行时间';
COMMENT ON COLUMN sys_tasks.finished_at IS '任务结束时间';
COMMENT ON COLUMN sys_tasks.deleted_at IS '软删除时间';

------------------------------------------------------------------------------

/******************************************************************************
 * MCP 工具注册、授权、调用日志
 ******************************************************************************/

/** 工具注册表 */
CREATE TABLE IF NOT EXISTS mcp_tools
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code          VARCHAR(64)  NOT NULL UNIQUE,
    name          VARCHAR(128) NOT NULL,
    type          VARCHAR(64)  NOT NULL, -- HTTP/AGENT/FUNCTION
    description   TEXT,
    icon_url      VARCHAR(256),
    param_schema  JSONB,                 -- JSON Schema
    result_schema JSONB,
    endpoint      VARCHAR(256),
    auth_type     VARCHAR(32),
    enabled       BOOLEAN     DEFAULT true,
    owner_id      BIGINT,
    created_by    BIGINT,
    created_at    TIMESTAMPTZ DEFAULT now(),
    deleted_at    TIMESTAMPTZ,
    FOREIGN KEY (owner_id) REFERENCES sys_users (id) ON DELETE SET NULL,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE mcp_tools IS 'MCP工具/插件注册表，含参数schema与元信息';
COMMENT ON COLUMN mcp_tools.code IS '工具唯一编码';
COMMENT ON COLUMN mcp_tools.name IS '工具名称';
COMMENT ON COLUMN mcp_tools.type IS '工具类型（如HTTP/AGENT等）';
COMMENT ON COLUMN mcp_tools.description IS '工具说明';
COMMENT ON COLUMN mcp_tools.icon_url IS '工具图标URL';
COMMENT ON COLUMN mcp_tools.param_schema IS '参数JSON Schema';
COMMENT ON COLUMN mcp_tools.result_schema IS '返回值JSON Schema';
COMMENT ON COLUMN mcp_tools.endpoint IS '接口endpoint';
COMMENT ON COLUMN mcp_tools.auth_type IS '鉴权类型';
COMMENT ON COLUMN mcp_tools.enabled IS '工具是否启用';
COMMENT ON COLUMN mcp_tools.owner_id IS '注册人ID';
COMMENT ON COLUMN mcp_tools.created_by IS '工具创建人ID';
COMMENT ON COLUMN mcp_tools.created_at IS '注册时间';
COMMENT ON COLUMN mcp_tools.deleted_at IS '软删除时间';

/** 流程节点-工具多对多关联表 */
CREATE TABLE IF NOT EXISTS flow_node_tools
(
    node_id BIGINT NOT NULL,
    tool_id BIGINT NOT NULL,
    PRIMARY KEY (node_id, tool_id),
    FOREIGN KEY (node_id) REFERENCES flow_nodes (id) ON DELETE CASCADE,
    FOREIGN KEY (tool_id) REFERENCES mcp_tools (id) ON DELETE CASCADE
);
COMMENT ON TABLE flow_node_tools IS '流程节点与MCP工具多对多关联表';
COMMENT ON COLUMN flow_node_tools.node_id IS '流程节点ID';
COMMENT ON COLUMN flow_node_tools.tool_id IS 'MCP工具ID';

/** 工具-租户授权表 */
CREATE TABLE IF NOT EXISTS mcp_tool_tenant_auth
(
    tool_id     BIGINT NOT NULL,
    tenant_id   BIGINT NOT NULL,
    api_key     VARCHAR(128),
    quota_limit INT,
    quota_used  INT         DEFAULT 0,
    enabled     BOOLEAN     DEFAULT true,
    granted_at  TIMESTAMPTZ DEFAULT now(),
    PRIMARY KEY (tool_id, tenant_id),
    FOREIGN KEY (tool_id) REFERENCES mcp_tools (id) ON DELETE CASCADE,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE CASCADE
);
COMMENT ON TABLE mcp_tool_tenant_auth IS 'MCP工具租户授权表，记录每个租户启用/配额情况';
COMMENT ON COLUMN mcp_tool_tenant_auth.tool_id IS '工具ID';
COMMENT ON COLUMN mcp_tool_tenant_auth.tenant_id IS '租户ID';
COMMENT ON COLUMN mcp_tool_tenant_auth.api_key IS '该租户下的API Key（如有）';
COMMENT ON COLUMN mcp_tool_tenant_auth.quota_limit IS '调用配额上限';
COMMENT ON COLUMN mcp_tool_tenant_auth.quota_used IS '已用配额';
COMMENT ON COLUMN mcp_tool_tenant_auth.enabled IS '是否启用';
COMMENT ON COLUMN mcp_tool_tenant_auth.granted_at IS '授权时间';

/** 工具调用日志表 */
CREATE TABLE IF NOT EXISTS mcp_tool_call_logs
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tool_id     BIGINT NOT NULL,
    tenant_id   BIGINT,
    user_id     BIGINT,
    thread_id   BIGINT,
    flow_run_id BIGINT,
    params      JSONB  NOT NULL,
    result      JSONB,
    status      SMALLINT    DEFAULT 0,
    error_msg   TEXT,
    latency_ms  INT,
    created_at  TIMESTAMPTZ DEFAULT now(),
    FOREIGN KEY (tool_id) REFERENCES mcp_tools (id) ON DELETE SET NULL
);
COMMENT ON TABLE mcp_tool_call_logs IS 'MCP工具调用日志表，追踪所有调用明细';
COMMENT ON COLUMN mcp_tool_call_logs.tool_id IS '工具ID';
COMMENT ON COLUMN mcp_tool_call_logs.tenant_id IS '租户ID';
COMMENT ON COLUMN mcp_tool_call_logs.user_id IS '操作用户ID';
COMMENT ON COLUMN mcp_tool_call_logs.thread_id IS '关联会话ID（可选）';
COMMENT ON COLUMN mcp_tool_call_logs.flow_run_id IS '流程运行ID（可选）';
COMMENT ON COLUMN mcp_tool_call_logs.params IS '调用参数（JSON）';
COMMENT ON COLUMN mcp_tool_call_logs.result IS '调用返回结果';
COMMENT ON COLUMN mcp_tool_call_logs.status IS '调用状态';
COMMENT ON COLUMN mcp_tool_call_logs.error_msg IS '调用失败原因';
COMMENT ON COLUMN mcp_tool_call_logs.latency_ms IS '耗时（ms）';
COMMENT ON COLUMN mcp_tool_call_logs.created_at IS '调用时间';

------------------------------------------------------------------------------

/******************************************************************************
 * 提示词模板、对象存储元数据
 ******************************************************************************/

/** 提示词模板表 */
CREATE TABLE IF NOT EXISTS prompt_templates
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id  BIGINT       NOT NULL,
    name       VARCHAR(128) NOT NULL,
    content    TEXT         NOT NULL,
    model_code VARCHAR(32)  NOT NULL REFERENCES dict_models (code),
    created_by BIGINT       NOT NULL,
    version    INT         DEFAULT 1,
    is_system  BOOLEAN     DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ,
    FOREIGN KEY (tenant_id) REFERENCES sys_tenants (id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES sys_users (id) ON DELETE SET NULL
);
COMMENT ON TABLE prompt_templates IS '提示词模板表，支持多租户、多版本、系统内置';
COMMENT ON COLUMN prompt_templates.id IS '模板ID';
COMMENT ON COLUMN prompt_templates.tenant_id IS '租户ID';
COMMENT ON COLUMN prompt_templates.name IS '模板名称';
COMMENT ON COLUMN prompt_templates.content IS '模板内容';
COMMENT ON COLUMN prompt_templates.model_code IS '适用模型代码';
COMMENT ON COLUMN prompt_templates.created_by IS '创建人ID';
COMMENT ON COLUMN prompt_templates.version IS '模板版本号';
COMMENT ON COLUMN prompt_templates.is_system IS '是否系统预置模板';
COMMENT ON COLUMN prompt_templates.created_at IS '创建时间';
COMMENT ON COLUMN prompt_templates.deleted_at IS '软删除时间';

/** 对象存储元数据表 */
CREATE TABLE IF NOT EXISTS file_objects
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    bucket     VARCHAR(64)  NOT NULL,
    object_key VARCHAR(256) NOT NULL,
    size_bytes BIGINT,
    sha256     CHAR(64) UNIQUE,
    created_at TIMESTAMPTZ DEFAULT now(),
    deleted_at TIMESTAMPTZ
);
COMMENT ON TABLE file_objects IS '对象存储文件元数据表';
COMMENT ON COLUMN file_objects.id IS '主键ID';
COMMENT ON COLUMN file_objects.bucket IS '存储桶名';
COMMENT ON COLUMN file_objects.object_key IS '对象唯一Key';
COMMENT ON COLUMN file_objects.size_bytes IS '对象大小(字节)';
COMMENT ON COLUMN file_objects.sha256 IS '内容哈希，防重复';
COMMENT ON COLUMN file_objects.created_at IS '文件上传时间';
COMMENT ON COLUMN file_objects.deleted_at IS '软删除时间';

------------------------------------------------------------------------------
